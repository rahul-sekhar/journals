'use strict';

/* Directives */


angular.module('journalsApp.directives', []).
  
  directive('profileFields', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: { 
        person: '=parent'
      },
      templateUrl: '<%= asset_path("profile_fields_template.html") %>',
      replace: true,
      controller: 'FieldsCtrl'
    };
  }).

  directive('field', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: { 
        parent: '=',
        fieldName: '@'
      },
      template:
        '<div class="field" ng-show="editMode || parent[fieldName]">' +
          '<p class="field-name">{{fieldName | capitalize}}</p>' +
          '<p ng-hide="editMode" ng-click="startEdit()">{{parent[fieldName]}}</p>' +
          '<input ng-show="editMode" focus-on="editMode" ng-model="editorValue" finish-edit="finishEdit()" cancel-edit="cancelEdit()" ng-trim="false" />' +
          '<div ng-transclude></div>' +
        '</div>',
      replace: true,
      controller: 'InPlaceEditCtrl'
    };
  }).

  directive('headingField', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: { 
        parent: '=',
        fieldName: '@'
      },
      template:
        '<div class="heading-field">' +
          '<h3 ng-hide="editMode" ng-click="startEdit()">{{parent[fieldName]}}</h3>' +
          '<input ng-show="editMode" focus-on="editMode" ng-model="editorValue" finish-edit="finishEdit()" cancel-edit="cancelEdit()" ng-trim="false" />' +
        '</div>',
      replace: true,
      controller: 'InPlaceEditCtrl'
    };
  }).
  
  directive('smallHeadingField', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: { 
        parent: '=',
        fieldName: '@'
      },
      template:
        '<div class="heading-field">' +
          '<h4 ng-hide="editMode" ng-click="startEdit()">{{parent[fieldName]}}</h4>' +
          '<input ng-show="editMode" focus-on="editMode" ng-model="editorValue" finish-edit="finishEdit()" cancel-edit="cancelEdit()" ng-trim="false" />' +
        '</div>',
      replace: true,
      controller: 'InPlaceEditCtrl'
    };
  }).

  directive('multiLineField', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: { 
        parent: '=',
        fieldName: '@'
      },
      template:
        '<div class="field" ng-show="editMode || parent[fieldName]">' +
          '<p class="field-name">{{fieldName | capitalize}}</p>' +
          '<p ng-hide="editMode" ng-click="startEdit()" ng-bind-html="parent[fieldName] | simpleFormat"></p>' +
          '<textarea ng-show="editMode" focus-on="editMode" ng-model="editorValue" finish-edit="finishEdit()" cancel-edit="cancelEdit()" ng-trim="false"></textarea>' +
        '</div>',
      replace: true,
      controller: 'InPlaceEditCtrl'
    };
  }).

  directive('dateField', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: {
        parent: '=',
        displayName: '@',
        fieldName: '@'
      },
      template:
        '<div class="field" ng-show="editMode || parent[fieldName]">' +
          '<p class="field-name">{{displayName | capitalize}}</p>' +
          '<p ng-hide="editMode" ng-click="startEdit()">{{parent[fieldName]}} ({{parent[fieldName] | dateToAge}} yrs)</p>' +
          '<input ng-show="editMode" focus-on="editMode" ng-model="editorValue" readonly="true" />' +
          '<a href="" class="clear-date" ng-click="clearEdit()" ' + 
            'ng-show="editMode" ng-mouseenter="clearHover = true" ng-mouseleave="clearHover = false">clear</a>' +
        '</div>',
      replace: true,
      link: function(scope, elem, attrs) {
        elem.find('input').datepicker({
          dateFormat: 'dd-mm-yy',
          changeMonth: true,
          changeYear: true,
          yearRange: '-30:+0',
          onClose: function(date) {
            scope.$apply(function() {
              scope.editorValue = date;
            });
            // If the mouse is hovering over the clear button, delay exit to allow the click event to propogate
            if (scope.clearHover) {
              setTimeout(function() {
                scope.$apply("finishEdit()");
              }, 500);
            }
            else {
              scope.$apply("finishEdit()");
            }
          }
        });
      },
      controller: 'InPlaceEditCtrl'
    };
  }).

  directive('simpleField', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: { 
        parent: '=',
        fieldName: '@',
        type: '@'
      },
      template:
        '<div class="simple-field">' +
          '<p ng-hide="editMode" ng-click="startEdit()">{{parent[fieldName]}}</p>' +
          '<input ng-show="editMode" focus-on="editMode" ng-model="editorValue" finish-edit="finishEdit()" cancel-edit="cancelEdit()" ng-trim="false" />' +
        '</div>',
      replace: true,
      controller: 'InPlaceEditCtrl'
    };
  }).
  
  directive('finishEdit', function() {
    return function( scope, elem, attrs ) {
      elem.
        on('blur', function() {
          scope.$apply(attrs.finishEdit);
        }).
        on('keydown', function(e) {
          if (e.keyCode == 13 && elem.is("input")) {
            scope.$apply(attrs.finishEdit);
          }
        });
    };
  }).

  directive('cancelEdit', function() {
    return function( scope, elem, attrs ) {
      elem.
        on('keydown', function(e) {
          if (e.keyCode == 27) {
            scope.$apply(attrs.cancelEdit);
          }
        });
    };
  }).

  directive('focusOn', function() {
    return function( scope, elem, attrs ) {
      scope.$watch(attrs.focusOn, function(value) {
        if (value) {
          window.setTimeout(function(){
            elem.focus();
          }, 10);
        }
      }, true);
    };
  }).

  directive('onType', function() {
    return function( scope, elem, attrs ) {
      var typingTimer;
      var doneTypingInterval = attrs.typingInterval || 300;
      
      var doneTyping = function() {
        scope.$apply(attrs.onType);
      }

      elem.on('keyup change input', function(){
        clearTimeout(typingTimer);
        typingTimer = setTimeout(doneTyping, doneTypingInterval);
      });
    };
  }).

  directive('pagination', function($location) {
    return {
      restrict: 'E',
      transclude: true,
      scope: { 
        currentPage: '=',
        totalPages: '='
      },
      template:
        '<div id="pagination">' + 
        '</div>',
      replace: true,
      link: function(scope, elem, attrs) {
        var update = function() {
          elem.empty();
          if(scope.currentPage) {
            for(var i = 1; i <= scope.totalPages; i++) {
              if(i == scope.currentPage) {
                elem.append('<span class="current"> ' + i + ' </span> ')
              }
              else {
                var url = $location.path() + '?' + $.param({page: i});
                elem.append('<a href="' + url + '"> ' + i + ' </a>');
              }
            }
          }
        }
        scope.$watch('totalPages', update);
        scope.$watch('currentPage', update);
      }
    };
  }).

  directive('modal', function() {
    return {
      restrict: 'E',
      transclude: true,
      scope: {
        showOn: '='
      },
      template:
        '<div class="modal" ng-transclude>' +
        '</div>',
      replace: true,
      link: function(scope, elem, attrs) {
        elem.dialog({
          autoOpen: false,
          modal: true,
          show: 300,
          hide: 300,
          close: function() {
            scope.showOn = false;
            scope.$apply();
          }
        });
        scope.$watch('showOn', function(val) {
          if (val) elem.dialog('open');
        });
      }
    };
  });